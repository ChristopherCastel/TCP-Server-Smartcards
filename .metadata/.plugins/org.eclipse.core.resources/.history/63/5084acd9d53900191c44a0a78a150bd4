/*
 * client_api.cpp
 *
 *  Created on: 26 Feb 2019
 *      Author: Castel Christopher
 */

#include <fstream>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string>

#include "plog/include/plog/Log.h"
#include "plog/include/plog/Appenders/ColorConsoleAppender.h"

#include "client_api.h"

namespace client {

ClientAPI::ClientAPI() {

}

ClientAPI::~ClientAPI() {

}

void ClientAPI::initClient(std::string path) {
	// json config file
	std::ifstream i(path);
	nlohmann::json j;
	i >> j;

	// setup logger
	std::string logfile_path = j["logfile_path"];
	std::string log_level = j["log_level"];
	static plog::ConsoleAppender<plog::TxtFormatter> consoleAppender;
	if (log_level.compare("debug") == 0) {
		plog::init(plog::debug, logfile_path.c_str()).addAppender(&consoleAppender);
	} else {
		plog::init(plog::info, logfile_path.c_str()).addAppender(&consoleAppender);
	}

	// launch engine
	// engine = new ClientEngine(j["ip"], j["port"], j["default_timeout"]);
	LOG_INFO << "Client launched";
}

ResponsePacket ClientAPI::connectClient() {
	return engine->mock();
}

ResponsePacket ClientAPI::disconnectClient() {
	return engine->mock();
}

ResponsePacket ClientAPI::handleRequest(std::string request) {
	return engine->mock();
}

} /* namespace client */

using namespace client;

int __cdecl main(void) {
	ClientAPI* client;
	client->initClient("./config/init.json");
	client->connectClient();
	return 0;
}
