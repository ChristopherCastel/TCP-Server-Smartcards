#include <fstream>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>

#include "nlohmann/json.hpp"
#include "plog/include/plog/Log.h"
#include "plog/include/plog/Appenders/ColorConsoleAppender.h"

#include "server_engine.h"
#include "request_code.h"
#include "server_api.h"
#include "response_packet.h"

namespace server {

ServerAPI::ServerAPI(std::string path) {
	// json config file
	std::ifstream i(path);
	nlohmann::json j;
	i >> j;

	// setup logger
	std::string logfile_path = j["logfile_path"];
	std::string log_level = j["log_level"];
	static plog::ConsoleAppender<plog::TxtFormatter> consoleAppender;
	if (log_level.compare("debug") == 0) {
		plog::init(plog::debug, logfile_path.c_str()).addAppender(&consoleAppender);
	} else {
		plog::init(plog::info, logfile_path.c_str()).addAppender(&consoleAppender);
	}

	// launch engine
	engine = new ServerEngine(j["ip"], j["port"], j["default_timeout"]);
	LOG_INFO << "Server launched";
}

ServerAPI::~ServerAPI() {

}

ResponsePacket ServerAPI::startServer() {
	return engine->startListening();
}

ResponsePacket ServerAPI::listClients() {
	return engine->listClients();
}

ResponsePacket ServerAPI::sendCommand(int id_client, std::string command) {
	return engine->handleRequest(id_client, SEND_COMMAND);
}

ResponsePacket ServerAPI::restartTarget(int id_client) {
	return engine->handleRequest(id_client, RESTART_TARGET);
}

ResponsePacket ServerAPI::echoClient(int id_client) {
	return engine->handleRequest(id_client, ECHO);
}

ResponsePacket ServerAPI::diagClient(int id_client) {
	return engine->handleRequest(id_client, DIAG);
}

ResponsePacket ServerAPI::stopServer() {
	ResponsePacket response = engine->stopAllClients();
	delete engine;
	return response;
}

}  // namespace server

using namespace server;

int __cdecl main(void) {
	ServerAPI* server = new ServerAPI("./config/init.json");
	server->startServer();
	Sleep(6000);
	server->diagClient(1);
	server->echoClient(1);
	Sleep(1500);
	server->stopServer();
	delete server;
	return 0;
}
