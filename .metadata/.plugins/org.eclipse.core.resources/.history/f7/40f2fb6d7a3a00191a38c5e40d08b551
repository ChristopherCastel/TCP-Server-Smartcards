/*
 * client_api.cpp
 *
 *  Created on: 26 Feb 2019
 *      Author: Castel Christopher
 */

#include <fstream>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string>

#include "plog/include/plog/Log.h"
#include "plog/include/plog/Appenders/ColorConsoleAppender.h"

#include "client_api.h"

namespace client {

ClientAPI::ClientAPI() {
	engine = new ClientEngine();
}

ClientAPI::~ClientAPI() {

}

void ClientAPI::initClient(std::string path) {
	engine->initClient(path);
}

ResponsePacket ClientAPI::connectClient() {
	return engine->connectClient();
}

ResponsePacket ClientAPI::disconnectClient() {
	delete engine;
	return engine->mock();
}

ResponsePacket ClientAPI::handleRequest(std::string request) {
	return engine->mock();
}

} /* namespace client */

using namespace client;

#include <iostream>           // std::cout
#include <thread>             // std::thread
#include <chrono>             // std::chrono::seconds
#include <mutex>              // std::mutex, std::unique_lock
#include <condition_variable> // std::condition_variable, std::cv_status

std::condition_variable cv;

int value;

void read_value() {
  std::cin >> value;
  cv.notify_one();
}

int __cdecl main(void) {
//	ClientAPI client;
//	client.initClient("./config/init.json");
//	client.connectClient();

	  std::cout << "Please, enter an integer (I'll be printing dots): \n";
	  std::thread th (read_value);

	  std::mutex mtx;
	  std::unique_lock<std::mutex> lck(mtx);
	  while (cv.wait_for(lck,std::chrono::seconds(1))==std::cv_status::timeout) {
	    std::cout << '.' << std::endl;
	  }
	  std::cout << "You entered: " << value << '\n';

	  th.join();

	return 0;
}
